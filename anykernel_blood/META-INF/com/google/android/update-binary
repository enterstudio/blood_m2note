#!/sbin/sh
#
# BLOOD installation script
# Based on AnyKernel2 by osm0sis @ xda-developers
# Modified by AlexLartsev19 @ github.com

OUTFD=/proc/self/fd/$2;
ZIP="$3";
DIR=`dirname "$ZIP"`;

ui_print() {
  echo "ui_print $1" > "$OUTFD";
  echo "ui_print" > "$OUTFD";
}

show_progress() {
  echo "progress $1 $2" > $OUTFD;
}

set_perm() {
  chown "$1:$2" "$4";
  chmod "$3" "$4";
}

set_perm_recursive() {
  dirs=$(echo $* | awk '{ print substr($0, index($0,$5)) }');
  for i in $dirs; do
    chown -R $1.$2 $i; chown -R $1:$2 $i;
    find "$i" -type d -exec chmod $3 {} +;
    find "$i" -type f -exec chmod $4 {} +;
  done;
}

file_getprop() {
  grep "^$2" "$1" | cut -d= -f2;
}

getprop() {
  test -e /sbin/getprop && /sbin/getprop $1 || file_getprop /default.prop $1;
}

cleanup() {
  rm -rf /tmp/anykernel;
}

abort() {
  ui_print "$*"; exit 1;
}

show_progress 1.34 4;
cleanup;
mkdir -p /tmp/anykernel/bin;
cd /tmp/anykernel;
unzip -o "$ZIP";
if [ $? != 0 -o -z "$(ls /tmp/anykernel/tools)" ]; then
  abort "Unzip failed. Aborting...";
fi;
chmod -R 755 /tmp/anykernel/tools /tmp/anykernel/bin;

ui_print " ";
ui_print " ";
ui_print "===============================================";
ui_print " ";
ui_print " ";
ui_print " ";
ui_print "  $(file_getprop /tmp/anykernel/anykernel.sh kernel.string)  ";
ui_print " ";
ui_print " ";
ui_print " ";
ui_print "===============================================";
ui_print " ";
ui_print " ";

mounts=""
for p in "/cache" "/data" "/persist" "/system" "/vendor"; do
  if [ -d "$p" ] && grep -q "$p" "/etc/fstab" && ! mountpoint -q "$p"; then
    mounts="$mounts $p"
  fi
done
ui_print "- Mounting $mounts...";
ui_print " ";
for m in $mounts; do
  mount "$m"
done
grep -q "/system.*\sro[\s,]" /proc/mounts && mount -o remount,rw /system  # remount /system, sometimes necessary if mounted read-only

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.devicecheck)" == 1 ]; then
  ui_print "- Checking device...";
  ui_print " ";
  for i in 1 2 3 4 5; do
    testname="$(file_getprop /tmp/anykernel/anykernel.sh device.name$i)";
    if [ "$(getprop ro.product.device)" == "$testname" -o "$(getprop ro.build.product)" == "$testname" ]; then
      ui_print "Your device is: $testname";
      ui_print " ";
      match=1;
    fi;
  done;
  if [ "$match" != 1 ]; then
    for m in $mounts; do
        umount "$m"
    done
    abort "Unsupported device. Aborting...";
    ui_print " ";
  fi;
fi;

ui_print "- Installing kernel...";
ui_print " ";
/sbin/sh /tmp/anykernel/anykernel.sh;
if [ "$(cat /tmp/anykernel/exitcode)" == 1 ]; then 
  for m in $mounts; do
    umount "$m"
  done
  abort;
fi;

if [ -f /tmp/anykernel/blood.prop ]; then
  ui_print "- Pushing BLOOD properties...";
  ui_print " ";
  cp -rf /tmp/anykernel/blood.prop /system/blood.prop
  set_perm 0 0 644 /system/blood.prop
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.modules)" == 1 ]; then
  ui_print "- Pushing modules...";
  ui_print " ";
  if [ ! -d /system/lib/modules ]; then
    mkdir -p /system/lib/modules;
  fi;
  rm -rf /system/lib/modules/*;
  cp -rf /tmp/anykernel/modules/* /system/lib/modules/;
  set_perm_recursive 0 0 0755 0644 /system/lib/modules;
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.cleanup)" == 1 ]; then
  ui_print "- Cleaning...";
  ui_print " ";
  cleanup;
fi;

ui_print "- Unmounting $mounts..."
ui_print " ";
for m in $mounts; do
  umount "$m"
done

ui_print "Done!";

